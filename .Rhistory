est <- object$estimates
X <- model.matrix(reformulate(attr(terms(object$formula), "term.labels")), newdata)
new <- t(X) #convert row to column
func <- function(x) {
x*new
}
coef_sub <- est %>%
map(function(x){map(x,function(a){a[[1]]})}) %>%
map(function(x){data.frame(Reduce(cbind, x))})
pred_sub <- coef_sub %>%
map(function(x){apply(x, 2, func)}) %>%
map(colSums)
pred_sub_mean <- pred_sub %>% map(mean)
pred <- Reduce("+", pred_sub_mean)/length(pred_sub_mean)
if (confidence) {
if (level) {
level = level
} else {
level = 0.95
}
pred_sub_ci <- pred_sub %>% map(function(x){quantile(x, c((1-level)/2, (1+level)/2))})
pred_ci <- Reduce("+", pred_sub_ci) / length(pred_sub_ci)
pred_and_ci <- c(pred_mean, pred_ci)
pred_and_ci
} else {
pred
}
}
#' @import tidyverse
#' @import purrr
#' @import future
#' @import furrr
#' @import stats
#' @importFrom magrittr %>%
#' @details
# Logistic Regression with Little Bag of Bootstraps
"_PACKAGE"
#' @export
blbglm <- function(formula, data, m = 2, B = 10, parallel = FALSE) {
data_list <- split_data(data, m)
if (isTRUE(parallel)){
plan(multiprocess, workers = 4)
estimates <- future_map(
data_list,
~ glm_each_subsample(formula = formula, data = ., n = nrow(data), B = B))
} else {
estimates <- map(
data_list,
~ glm_each_subsample(formula = formula, data = ., n = nrow(data), B = B))
}
m = m
B = B
parallel = parallel
call <- match.call()
res <- list(estimates = estimates, formula = formula, m=m, B=B, call = call, parallel = parallel)
class(res) <- "blbglm"
invisible(res)
}
#' split data into m parts of approximated equal sizes
split_data <- function(data, m) {
indx <- sample.int(m, nrow(data), replace = TRUE)
data %>% split(indx)
}
#' compute the estimates
glm_each_subsample <- function(formula, data, n, B) {
replicate(B, glm_each_boot(formula, data, n), simplify = FALSE)
}
#' compute the regression estimates for a blb dataset
glm_each_boot <- function(formula, data, n) {
freqs <- rmultinom(1, n, rep(1, nrow(data)))
glm1(formula, data, freqs)
}
#' estimate the regression estimates based on given number of repetitions
glm1 <- function(formula, data, freqs) {
# drop the original closure of formula,
# otherwise the formula will pick wrong variables from a parent scope.
environment(formula) <- environment()
fit <- glm(formula, data, weights = freqs, family = binomial("logit"))
list(coef = blbcoef(fit), sigma = blbsigma(fit))
}
#' compute the coefficients from fit
blbcoef <- function(fit) {
coef <- fit$coefficients
}
#' compute sigma from fit
blbsigma <- function(fit) {
p <- fit$rank
y <- model.extract(fit$model, "response")
e <- fitted(fit) - y
w <- fit$weights
sqrt(sum(e^2*w)/(p-1))
}
#' @export
#' @method print blbglm
print.blbglm <- function(x, ...) {
cat("\nblbglm model\n\nCall:\n ", paste(deparse(x$call)))
if(length(coef.blbglm(x))) {
cat("\n\nCoefficients\n")
print.default(coef.blbglm(x))
} else {cat("\nNo Coefficients\n\n")}
cat("\nSigma:", sigma.blbglm(x))
cat("\n\nSubsamples:", paste(x$m))
cat("\nBootstrap Size:", paste(x$B))
}
#' @export
#' @method sigma blbglm
sigma.blbglm <- function(object, confidence = FALSE, level = 0.95, ...) {
if (is.null(level)) {
level = 0.95
} else {
level = level
}
par <- object$parallel
est <- object$estimates
if(isTRUE(par)){
sigma_list <- est %>%
future_map(function(x){map(x,function(a){a[[2]]})})
sigma_mat <- sigma_list %>%
future_map(function(x){as.matrix(matrix(unlist(x), nrow=length(unlist(x[[1]]))))})
mean_list = sigma_mat %>% future_map(mean)
sigma_mean = Reduce("+", mean_list) / length(mean_list)
ci_list = sigma_mat %>%
future_map(function(x){apply(x, 1, quantile, c((1-level)/2, (1+level)/2))})
} else {
sigma_list <- est %>%
map(function(x){map(x,function(a){a[[2]]})})
sigma_mat <- sigma_list %>%
map(function(x){as.matrix(matrix(unlist(x), nrow=length(unlist(x[[1]]))))})
mean_list = sigma_mat %>% map(mean)
sigma_mean = Reduce("+", mean_list) / length(mean_list)
ci_list = sigma_mat %>%
map(function(x){apply(x, 1, quantile, c((1-level)/2, (1+level)/2))})
}
sigma_ci = Reduce("+", ci_list) / length(ci_list)
colnames(sigma_ci) <- "sigma"
sigma_ci <- t(sigma_ci)
if(confidence == FALSE) {
sigma_mean
} else {
sigma_ci
}
}
#' @export
#' @method coef blbglm
coef.blbglm <- function(object, ...) {
est <- object$estimates
par <- object$parallel
coef_names <- names(est[[1]][[1]]$coef)
if(isTRUE(par)){
coef_sub <- est %>%
future_map(function(x){future_map(x,function(a){a[[1]]})}) %>%
future_map(function(x){data.frame(Reduce(cbind, x))})
}
else{
coef_sub <- est %>%
map(function(x){map(x,function(a){a[[1]]})}) %>%
map(function(x){data.frame(Reduce(cbind, x))})
}
print(coef_sub)
coef_sub_means <- map(coef_sub, rowMeans)
print(coef_sub_means)
coef_mean <- as.matrix(Reduce("+", coef_sub_means)/length(coef_sub_means))
colnames(coef_mean) <- "Estimates"
coef_mean
}
#' @export
#' @method confint blbglm
confint.blbglm <- function(object, parm = NULL, level = 0.95, ...) {
if (is.null(level)) {
level = 0.95
} else {
level = level
}
if (is.null(parm)) {
est <- object$estimates
if (isTRUE(object$parallel)){
ci_list <- est %>%
future_map(function(x){future_map(x,function(a){a[[1]]})}) %>%
future_map(function(x){data.frame(Reduce(cbind, x))}) %>%
future_map(function(x){apply(x, 1, quantile, c((1-level)/2, (1+level)/2))})
} else {
ci_list <- est %>%
map(function(x){map(x,function(a){a[[1]]})}) %>%
map(function(x){data.frame(Reduce(cbind, x))}) %>%
map(function(x){apply(x, 1, quantile, c((1-level)/2, (1+level)/2))})
}
} else { # else for the parameters
est <- object$estimates
if (isTRUE(object$parallel)){
ci_list <- est %>%
future_map(function(x){future_map(x,function(a){a[[1]][parm]})}) %>%
future_map(function(x){data.frame(Reduce(cbind, x))}) %>%
future_map(function(x){apply(x, 1, quantile, c((1-level)/2, (1+level)/2))})
} else {
ci_list <- est %>%
map(function(x){map(x,function(a){a[[1]][parm]})}) %>%
map(function(x){data.frame(Reduce(cbind, x))}) %>%
map(function(x){apply(x, 1, quantile, c((1-level)/2, (1+level)/2))})
}
}
confint <- t(Reduce("+", ci_list) / length(ci_list))
confint
}
#' @export
#' @method predict blbglm
predict.blbglm <- function(object, newdata, confidence = FALSE, level = 0.95, ...) {
est <- object$estimates
X <- model.matrix(reformulate(attr(terms(object$formula), "term.labels")), newdata)
new <- t(X) #convert row to column
func <- function(x) {
x*new
}
coef_sub <- est %>%
map(function(x){map(x,function(a){a[[1]]})}) %>%
map(function(x){data.frame(Reduce(cbind, x))})
pred_sub <- coef_sub %>%
map(function(x){apply(x, 2, func)}) %>%
map(colSums)
pred_sub_mean <- pred_sub %>% map(mean)
pred <- Reduce("+", pred_sub_mean)/length(pred_sub_mean)
if (confidence) {
if (level) {
level = level
} else {
level = 0.95
}
pred_sub_ci <- pred_sub %>% map(function(x){quantile(x, c((1-level)/2, (1+level)/2))})
pred_ci <- Reduce("+", pred_sub_ci) / length(pred_sub_ci)
pred_and_ci <- c(pred, pred_ci)
pred_and_ci
} else {
pred
}
}
test <- glm(C3H17M ~ OVERTIME + EFACT9 + EFACT6 + MANCONST + JOBCONST
+ TECHCONS + CSO9FT2, data = telcom, family = "binomial")
library("readxl") # read_excel
telcom = read_excel('choice12svar.xlsx', sheet = 1, col_names = TRUE, col_types = NULL, skip = 0)
# identify and treat NA
unique(telcom$C3H17M)
telcom$OVERTIME = ifelse(str_detect(telcom$OVERTIME, "-1"), sub('-1', NA, telcom$OVERTIME), telcom$OVERTIME)
telcom$OVERTIME = as.numeric(as.character(telcom$OVERTIME))
# sum(is.na(telcom$OVERTIME))
telcom$TECHCONS = ifelse(str_detect(telcom$TECHCONS, "-1"), sub('-1', NA, telcom$TECHCONS), telcom$TECHCONS)
telcom$TECHCONS = as.numeric(as.character(telcom$TECHCONS))
# sum(is.na(telcom$TECHCONS))
telcom$COMMTIME = ifelse(str_detect(telcom$COMMTIME, '-99999'), sub('-99999', NA, telcom$COMMTIME), telcom$COMMTIME)
telcom$COMMTIME = ifelse(str_detect(telcom$COMMTIME, '-0.1'), sub('-0.1', NA, telcom$COMMTIME), telcom$COMMTIME)
telcom$COMMTIME = as.numeric(as.character(telcom$COMMTIME))
# sum(is.na(telcom$COMMTIME))
telcom$SELFDRIV = ifelse(str_detect(telcom$SELFDRIV, '-1'), sub('-1', NA, telcom$SELFDRIV), telcom$SELFDRIV)
telcom$SELFDRIV = as.numeric(as.character(telcom$SELFDRIV))
# sum(is.na(telcom$SELFDRIV))
telcom$VEHPERWK = ifelse(str_detect(telcom$VEHPERWK, '-1'), sub('-1', NA, telcom$VEHPERWK), telcom$VEHPERWK)
telcom$VEHPERWK = as.numeric(as.character(telcom$VEHPERWK))
# sum(is.na(telcom$VEHPERWK))
telcom = na.omit(telcom)
#write.csv(telcom, "telecom_data.csv")
glmfit = glm(C3H17M ~ OVERTIME + EFACT9 + EFACT6 + MANCONST + JOBCONST
+ TECHCONS + CSO9FT2,
family = binomial(link= "logit"), data = telcom)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#' @import tidyverse
#' @import purrr
#' @import future
#' @import furrr
#' @import stats
#' @importFrom magrittr %>%
#' @details
# Logistic Regression with Little Bag of Bootstraps
"_PACKAGE"
#' @export
blbglm <- function(formula, data, m = 2, B = 10, parallel = FALSE) {
data_list <- split_data(data, m)
if (isTRUE(parallel)){
plan(multiprocess, workers = 4)
estimates <- future_map(
data_list,
~ glm_each_subsample(formula = formula, data = ., n = nrow(data), B = B))
} else {
estimates <- map(
data_list,
~ glm_each_subsample(formula = formula, data = ., n = nrow(data), B = B))
}
m = m
B = B
parallel = parallel
call <- match.call()
res <- list(estimates = estimates, formula = formula, m=m, B=B, call = call, parallel = parallel)
class(res) <- "blbglm"
invisible(res)
}
#' split data into m parts of approximated equal sizes
split_data <- function(data, m) {
indx <- sample.int(m, nrow(data), replace = TRUE)
data %>% split(indx)
}
#' compute the estimates
glm_each_subsample <- function(formula, data, n, B) {
replicate(B, glm_each_boot(formula, data, n), simplify = FALSE)
}
#' compute the regression estimates for a blb dataset
glm_each_boot <- function(formula, data, n) {
freqs <- rmultinom(1, n, rep(1, nrow(data)))
glm1(formula, data, freqs)
}
#' estimate the regression estimates based on given number of repetitions
glm1 <- function(formula, data, freqs) {
# drop the original closure of formula,
# otherwise the formula will pick wrong variables from a parent scope.
environment(formula) <- environment()
fit <- glm(formula, data, weights = freqs, family = binomial("logit"))
list(coef = blbcoef(fit), sigma = blbsigma(fit))
}
#' compute the coefficients from fit
blbcoef <- function(fit) {
coef <- fit$coefficients
}
#' compute sigma from fit
blbsigma <- function(fit) {
p <- fit$rank
y <- model.extract(fit$model, "response")
e <- fitted(fit) - y
w <- fit$weights
sqrt(sum(e^2*w)/(p-1))
}
#' @export
#' @method print blbglm
print.blbglm <- function(x, ...) {
cat("\nblbglm model\n\nCall:\n ", paste(deparse(x$call)))
if(length(coef.blbglm(x))) {
cat("\n\nCoefficients\n")
print.default(coef.blbglm(x))
} else {cat("\nNo Coefficients\n\n")}
cat("\nSigma:", sigma.blbglm(x))
cat("\n\nSubsamples:", paste(x$m))
cat("\nBootstrap Size:", paste(x$B))
}
#' @export
#' @method sigma blbglm
sigma.blbglm <- function(object, confidence = FALSE, level = 0.95, ...) {
if (is.null(level)) {
level = 0.95
} else {
level = level
}
par <- object$parallel
est <- object$estimates
if(isTRUE(par)){
sigma_list <- est %>%
future_map(function(x){map(x,function(a){a[[2]]})})
sigma_mat <- sigma_list %>%
future_map(function(x){as.matrix(matrix(unlist(x), nrow=length(unlist(x[[1]]))))})
mean_list = sigma_mat %>% future_map(mean)
sigma_mean = Reduce("+", mean_list) / length(mean_list)
ci_list = sigma_mat %>%
future_map(function(x){apply(x, 1, quantile, c((1-level)/2, (1+level)/2))})
} else {
sigma_list <- est %>%
map(function(x){map(x,function(a){a[[2]]})})
sigma_mat <- sigma_list %>%
map(function(x){as.matrix(matrix(unlist(x), nrow=length(unlist(x[[1]]))))})
mean_list = sigma_mat %>% map(mean)
sigma_mean = Reduce("+", mean_list) / length(mean_list)
ci_list = sigma_mat %>%
map(function(x){apply(x, 1, quantile, c((1-level)/2, (1+level)/2))})
}
sigma_ci = Reduce("+", ci_list) / length(ci_list)
colnames(sigma_ci) <- "sigma"
sigma_ci <- t(sigma_ci)
if(confidence == FALSE) {
sigma_mean
} else {
sigma_ci
}
}
#' @export
#' @method coef blbglm
coef.blbglm <- function(object, ...) {
est <- object$estimates
par <- object$parallel
coef_names <- names(est[[1]][[1]]$coef)
if(isTRUE(par)){
coef_sub <- est %>%
future_map(function(x){future_map(x,function(a){a[[1]]})}) %>%
future_map(function(x){data.frame(Reduce(cbind, x))})
}
else{
coef_sub <- est %>%
map(function(x){map(x,function(a){a[[1]]})}) %>%
map(function(x){data.frame(Reduce(cbind, x))})
}
print(coef_sub)
coef_sub_means <- map(coef_sub, rowMeans)
print(coef_sub_means)
coef_mean <- as.matrix(Reduce("+", coef_sub_means)/length(coef_sub_means))
colnames(coef_mean) <- "Estimates"
coef_mean
}
#' @export
#' @method confint blbglm
confint.blbglm <- function(object, parm = NULL, level = 0.95, ...) {
if (is.null(level)) {
level = 0.95
} else {
level = level
}
if (is.null(parm)) {
est <- object$estimates
if (isTRUE(object$parallel)){
ci_list <- est %>%
future_map(function(x){future_map(x,function(a){a[[1]]})}) %>%
future_map(function(x){data.frame(Reduce(cbind, x))}) %>%
future_map(function(x){apply(x, 1, quantile, c((1-level)/2, (1+level)/2))})
} else {
ci_list <- est %>%
map(function(x){map(x,function(a){a[[1]]})}) %>%
map(function(x){data.frame(Reduce(cbind, x))}) %>%
map(function(x){apply(x, 1, quantile, c((1-level)/2, (1+level)/2))})
}
} else { # else for the parameters
est <- object$estimates
if (isTRUE(object$parallel)){
ci_list <- est %>%
future_map(function(x){future_map(x,function(a){a[[1]][parm]})}) %>%
future_map(function(x){data.frame(Reduce(cbind, x))}) %>%
future_map(function(x){apply(x, 1, quantile, c((1-level)/2, (1+level)/2))})
} else {
ci_list <- est %>%
map(function(x){map(x,function(a){a[[1]][parm]})}) %>%
map(function(x){data.frame(Reduce(cbind, x))}) %>%
map(function(x){apply(x, 1, quantile, c((1-level)/2, (1+level)/2))})
}
}
confint <- t(Reduce("+", ci_list) / length(ci_list))
confint
}
#' @export
#' @method predict blbglm
predict.blbglm <- function(object, newdata, confidence = FALSE, level = 0.95, ...) {
est <- object$estimates
X <- model.matrix(reformulate(attr(terms(object$formula), "term.labels")), newdata)
new <- t(X) #convert row to column
func <- function(x) {
x*new
}
coef_sub <- est %>%
map(function(x){map(x,function(a){a[[1]]})}) %>%
map(function(x){data.frame(Reduce(cbind, x))})
pred_sub <- coef_sub %>%
map(function(x){apply(x, 2, func)}) %>%
map(colSums)
pred_sub_mean <- pred_sub %>% map(mean)
pred <- Reduce("+", pred_sub_mean)/length(pred_sub_mean)
if (confidence) {
if (level) {
level = level
} else {
level = 0.95
}
pred_sub_ci <- pred_sub %>% map(function(x){quantile(x, c((1-level)/2, (1+level)/2))})
pred_ci <- Reduce("+", pred_sub_ci) / length(pred_sub_ci)
pred_and_ci <- c(pred, pred_ci)
pred_and_ci
} else {
pred
}
}
telefit = blbglm(C3H17M ~ OVERTIME + EFACT9 + EFACT6 + MANCONST + JOBCONST
+ TECHCONS + CSO9FT2, data = telcom, m = 3, B = 10, parallel = TRUE)
sigma(telefit)
sigma(telefit, confidence = TRUE)
coef(telefit)
conf <- confint(telefit)
confint(telefit, c("EFACT9", "EFACT6"))
x <- data.frame(OVERTIME = 5, EFACT9 = -0.5, EFACT6 = 1, MANCONST = 0, JOBCONST = 1, TECHCONS = 0, CSO9FT2 = 1)
predict.blbglm(telefit, x, confidence = TRUE)
#coef.blbglm(telefit)
test <- glm(C3H17M ~ OVERTIME + EFACT9 + EFACT6 + MANCONST + JOBCONST
+ TECHCONS + CSO9FT2, data = telcom, family = "binomial")
test$model
bankfit <-blbglm(as.factor(y) ~ (.), data = bank, m = 3, B = 10)
x <- data.frame(OVERTIME = c(4, 5), EFACT9 = c(0.5, -0.5), EFACT6 = c(1, 0.6), MANCONST = c(1, 0), JOBCONST = c(1, 1), TECHCONS = c(0, 1), CSO9FT2 = c(1, 0.7))
predict.blbglm(telefit, x, confidence = TRUE)
#coef.blbglm(telefit)
library(tidyverse)
bank = read.csv("bank-additional.csv", sep=";")
# Remove bad variables
drop<-c("duration", "emp.var.rate", "loan", "default", "education")
bank<-bank[,!names(bank)%in%drop]
bank = na.omit(bank)
# numeric y
# comment
bank$ynumeric = ifelse(bank$y == "yes", 1, 0)
# Model
logitmodel = glm(ynumeric ~ (.), data=bank, family = binomial("logit"))
#write.csv(bank, "bank_data.csv")
bank$job <- as.numeric(bank$job)
library(tidyverse)
bank = read.csv("bank-additional.csv", sep=";")
# Remove bad variables
drop<-c("duration", "emp.var.rate", "loan", "default", "education")
bank<-bank[,!names(bank)%in%drop]
bank = na.omit(bank)
# numeric y
# comment
bank$ynumeric = ifelse(bank$y == "yes", 1, 0)
#bank$job <- as.numeric(bank$job)
# Model
logitmodel = glm(ynumeric ~ (.), data=bank, family = binomial("logit"))
#write.csv(bank, "bank_data.csv")
